# return 2d matrix of reports as integers
def parse():
  filename = "reports.txt"
  reports = []
  file = open(filename, "r")
  for line in file:
    str_report = line.split()
    report = [int(numeric_string) for numeric_string in str_report]
    reports.append(report)

  return reports

def isPairSafeAscending(x, y):
  # y is the next number in the pair
  # y must be greater than x, but not greater than x + 3
  if (x >= y):
    return False
  if (x + 3 < y):
    return False
  return True

def isPairSafeDescending(x, y):
  # y is the next number in the pair
  # y must be smaller than x, but not smaller than x - 3
  if (x <= y):
    return False
  if (x - 3 > y):
    return False
  return True

# check if a report is safe and all descending
def isSafeDescending(report):
  size = len(report)
  i = 0
  while i < size - 1:
    if (not isPairSafeDescending(report[i], report[i+1])):
      return False
    i += 1
  return True

# check if a report is safe and all ascending
def isSafeAscending(report):
  size = len(report)
  i = 0
  while i < size - 1:
    if (not isPairSafeAscending(report[i], report[i+1])):
      return False
    i += 1
  return True

def isSafeHelper(report):
  if isSafeDescending(report):
    return True
  if isSafeAscending(report):
    return True

def isSafe(report):
  if isSafeHelper(report):
    return True

  newReport = report.copy()
  for i in range(len(report)):
    report.pop(i)
    if (isSafeHelper(report)):
      return True
    report = newReport.copy()
  
  return False

#count number of safe reports
def main():
  reports = parse()

  numsafe = 0
  for report in reports:
    if isSafe(report):
      numsafe += 1

  return numsafe


print(main())
