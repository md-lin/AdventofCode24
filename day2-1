# return 2d matrix of reports as integers
def parse():
  filename = "3reports.txt"
  reports = []
  file = open(filename, "r")
  for line in file:
    str_report = line.split()
    report = [int(numeric_string) for numeric_string in str_report]
    reports.append(report)

  return reports


def isPairSafeAscending(x, y):
  # y is the next number in the pair
  # y must be greater than x, but not greater than x + 3
  if (x >= y):
    return False
  if (x + 3 < y):
    return False
  return True


def isPairSafeDescending(x, y):
  # y is the next number in the pair
  # y must be smaller than x, but not smaller than x - 3
  if (x <= y):
    return False
  if (x - 3 > y):
    return False
  return True


# check if a report is safe and all descending
def isSafeDescending(report):
  removedFlag = False
  removedSecondLast = False
  size = len(report)
  i = 0
  while i < size - 2:
    if (not isPairSafeDescending(report[i], report[i + 1])):
      # if we haven't already removed an element
      if (not removedFlag):
        # check if removing it will make it safe
        if (isPairSafeDescending(report[i], report[i + 2])):
          removedFlag = True
          if (i == size - 3):
            removedSecondLast = True
          # skip removed element
          i += 2
          continue
      return False
    i += 1
  # check the last pair only if we have already removed an element
  #   and it wasn't the second last element
  if (removedFlag and not removedSecondLast):
    if (not isPairSafeDescending(report[size - 2], report[size - 1])):
      return False
  return True


# check if a report is safe and all ascending
def isSafeAscending(report):
  removedFlag = False
  removedSecondLast = False
  size = len(report)
  i = 0
  while i < size - 2:
    if (not isPairSafeAscending(report[i], report[i + 1])):
      # if we haven't already removed an element
      if (not removedFlag):
        # check if removing it will make it safe
        if (isPairSafeAscending(report[i], report[i + 2])):
          removedFlag = True
          if (i == size - 3):
            removedSecondLast = True
          # skip removed element
          i += 2
          continue
      return False
    i += 1
  # check the last pair only if we have already removed an element
  #   and it wasn't the second last element
  if (removedFlag and not removedSecondLast):
    if (not isPairSafeAscending(report[size - 2], report[size - 1])):
      return False
  return True


#count number of safe reports
def main():
  reports = parse()

  numsafe = 0
  for report in reports:
    safe = False
    if isSafeDescending(report):
      numsafe += 1
      safe = True
    if isSafeAscending(report):
      numsafe += 1
      safe = True
    if (not safe):
      print(report)
  return numsafe


print(main())
